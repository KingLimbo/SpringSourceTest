#属性表示log4j2本身的日志信息打印级别
status = DEBUG
#如果犯错，url，路径等结果输出到strerr中
dest = err
#log4j 2.6 之前和 之后的 配置不同 ，2.6 之后 ，当第一次使用 identifiers 列表时,
#不再需要 指定 name。但是如果你要使用多个，仍然要指定
name = PropertiesConfig
# 指定日志文件的位置和文件名称,以便记录多份日志时,直接引用
property.filename = G:/Java/IDEA/projectFiles/GitHub/SpringSourceTest/spring-source-test/target/logs

# 级别过滤（过滤日志记录）
filter.threshold.type = ThresholdFilter
# 只记录debug级别以上的日志，大小写无关：(ALL<)TRACE<DEBUG<INFO<WARN<ERROR<FATAL(<OFF)
filter.threshold.level = debug

# 控制台类型的日志输出源
appender.console.type = Console
# 输出源的名称
appender.console.name = STDOUT
# 输出布局类型
appender.console.layout.type = PatternLayout
# 控制台输出编码
appender.console.layout.charset=UTF-8
# 输出模板
appender.console.layout.pattern =%d %p %C{1.} [%t] %m%n
appender.console.filter.threshold.type = ThresholdFilter
appender.console.filter.threshold.level = debug

# 文件滚动记录类型的日志输出源
appender.rolling.type = RollingFile
# 指定当前滚动输出源的名称
appender.rolling.name = RollingFile
# 指定当前日志文件的位置和文件名称,可以单独指定,也可以直接引用之前定义过得property.filename参数
appender.rolling.fileName = ${filename}/findit.log
# 指定当发生Rolling时，文件的转移和重命名规则
appender.rolling.filePattern = ${filename}/findit-%d{MM-dd-yy-HH-mm-ss}-%i.log.gz
# 滚动记录输出源布局类型
appender.rolling.layout.type = PatternLayout
# 日志文件输出编码
appender.rolling.layout.charset=UTF-8
# 滚动记录输出模板
appender.rolling.layout.pattern = %d %p %C{1.} [%t] %m%n
# 指定记录文件的封存策略，该策略主要是完成周期性的日志文件封存工作
appender.rolling.policies.type = Policies
# 基于时间的触发策略（TriggeringPolicy）
appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
# 当前记录周期为每2秒生成一个文件，如果filePattern中配置的文件重命名规则是target/rolling2/test1-%d{yyyy-MM-dd HH-mm}-%i，最小的时间粒度是mm，即分钟，TimeBasedTriggeringPolicy指定的size是1，结合起来就是每2分钟生成一个新文件。如果改成%d{yyyy-MM-dd HH}，最小粒度为小时，则每2个小时生成一个文件。
appender.rolling.policies.time.interval = 2
# 是否对封存时间进行调制。若modulate=true，则封存时间将以0点为边界进行偏移计算。比如，modulate=true，interval=4hours，那么假设上次封存日志的时间为03:00，则下次封存日志的时间为04:00，之后的封存时间依次为08:00，12:00，16:00
appender.rolling.policies.time.modulate = true
# 基于日志文件体积的触发策略。
appender.rolling.policies.size.type = SizeBasedTriggeringPolicy
# 当日志文件体积大于size指定的值时，触发Rolling
appender.rolling.policies.size.size=100MB
# 文件封存的覆盖策略（RolloverStrategy）
appender.rolling.strategy.type = DefaultRolloverStrategy
# 生成分割（封存）文件的个数，默认为5(-1,-2,-3,-4,-5)
appender.rolling.strategy.max = 5
# 设置字符集编码
appender.rolling.Encoding=UTF-8

# 记录器名称
logger.rolling.name = com.example.my.app
# 设置打印级别（日志级别）
logger.rolling.level = debug
# 是否向上级logger传递打印信息
logger.rolling.additivity = false
# 关联名称为RollingFile的输出源（appender）
logger.rolling.appenderRef.rolling.ref = RollingFile

# 根记录器，所有记录器的父辈
rootLogger.level = info
# 关联名称为STDOUT的输出源（appender）
rootLogger.appenderRef.stdout.ref = STDOUT
# 关联名称为RollingFile的输出源（appender）
rootLogger.appenderRef.rolling.ref = RollingFile
