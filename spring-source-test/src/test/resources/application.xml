<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


    <!-- 自动扫描(自动注入) -->
    <context:component-scan base-package="com.limbo.**.service"/>

    <context:property-placeholder location="jdbc.properties"/>
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="20"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
        <!-- 监控统计用的filter:stat日志用的filter:log4j 防御sql注入的filter:wall -->
        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <property name="filters" value="stat log4j"/>
    </bean>

    <!-- sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="mybatis-config.xml"/>
        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
        <property name="mapperLocations" value="classpath:com/limbo/**/mapper/*Mapper.xml"/>
    </bean>

    <!-- mapper批量扫描，从mapper包中扫描mapper接口，自动创建代理对象并且在spring容器中注册 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 如果扫描多个包，每个包中间用,号分隔，不能使用通配符 -->
        <property name="basePackage" value="com.limbo.jdbctest.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManagerR" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 注解方式配置事物 -->
    <!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->
    <!-- 拦截器方式配置事物 -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManagerR">
        <tx:attributes>
            <!-- propagation="REQUIRED" 默认值-->
            <tx:method name="add*" rollback-for="Exception" />
            <tx:method name="append*" rollback-for="Exception" />
            <tx:method name="insert*" rollback-for="Exception" />
            <tx:method name="save*" rollback-for="Exception" />
            <tx:method name="update*" rollback-for="Exception" />
            <tx:method name="modify*" rollback-for="Exception" />
            <tx:method name="edit*" rollback-for="Exception" />
            <tx:method name="delete*" rollback-for="Exception" />
            <tx:method name="remove*" rollback-for="Exception" />
            <tx:method name="repair" rollback-for="Exception" />
            <tx:method name="delAndRepair" rollback-for="Exception" />
            <tx:method name="get*" propagation="SUPPORTS" read-only="true" rollback-for="Exception" />
            <tx:method name="find*" propagation="SUPPORTS" read-only="true" rollback-for="Exception" />
            <tx:method name="load*" propagation="SUPPORTS" read-only="true" rollback-for="Exception" />
            <tx:method name="search*" propagation="SUPPORTS" read-only="true" rollback-for="Exception" />
            <tx:method name="datagrid*" propagation="SUPPORTS" read-only="true" rollback-for="Exception" />
            <tx:method name="*" propagation="SUPPORTS" read-only="true" rollback-for="Exception" />
        </tx:attributes>
    </tx:advice>
    <!--<aop:config>-->
        <!--<aop:pointcut id="transactionPointcut" expression="execution(public * com.limbo.*.service.impl.*Impl.*(..))"/>-->
        <!--<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice"/>-->
    <!--</aop:config>-->


</beans>